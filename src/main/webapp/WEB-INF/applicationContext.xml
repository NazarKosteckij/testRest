<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
			 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xmlns:beans="http://www.springframework.org/schema/beans"
			 xmlns:context="http://www.springframework.org/schema/context"
			 xmlns:task="http://www.springframework.org/schema/task"
			 xmlns:batch="http://www.springframework.org/schema/batch"

			 xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.test.rest" />
	<context:component-scan base-package="com.test.rest.controllers" />
	<context:component-scan base-package="com.test.rest.services" />

	<!-- Executor beans -->
	<beans:bean id="jobRepository"
		  class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
		<beans:property name="transactionManager" ref="transactionManager" />
	</beans:bean>

	<beans:bean id="jobLauncher"
				class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<beans:property name="jobRepository" ref="jobRepository" />
		<beans:property name="taskExecutor">
			<beans:bean class="org.springframework.core.task.SimpleAsyncTaskExecutor" />
		</beans:property>
	</beans:bean>



	<beans:bean id="scheduler" class="com.test.rest.constants.requests.Scheculder" />
	<!-- Run every 30 seconds -->
	<task:scheduled-tasks>
		<!--
        <task:scheduled ref="runScheduler" method="run" fixed-delay="5000" />
        -->
		<task:scheduled ref="scheduler" method="run" cron="*/30 * * * * *" />
	</task:scheduled-tasks>

	<!-- Beans of Services -->
	<beans:bean id="tokenCache" class="com.test.rest.utils.tokens.TokenCacheImpl">
		<beans:constructor-arg name="ttl" index="0" value="5000"></beans:constructor-arg>
	</beans:bean>
	<beans:bean id="rsa" class="com.test.rest.services.TokenServiceImpl" init-method="init" >
		<beans:property name="size" value="12"></beans:property>
	</beans:bean>
	
	<beans:bean id="userService" class="com.test.rest.services.users.UserServiceImpl"/>

 	<beans:bean id="emailService" class="com.test.rest.services.EmailServiceImpl">
 	<beans:property name="emailSender" ref="emailSender"></beans:property>
 	</beans:bean>
	<beans:bean id="statusUpdaterService" class="com.test.rest.services.devices.StatusUpdaterService">
		<beans:property name="getStatusRequestDao" ref="getStatusRequestDao"></beans:property>
 	</beans:bean>
	<beans:bean id="userFilterService" class="com.test.rest.services.filters.UserFilterServiceImpl"></beans:bean>

	<beans:bean id="userMapper" class="com.test.rest.utils.mappers.UserMapperImpl"></beans:bean>
	<beans:bean id="deviceService" class="com.test.rest.services.devices.DeviceService"/>
	<beans:bean id="emailSender" class="com.test.rest.utils.email.EmailSender" init-method="init">
 		<beans:property name="username" value="${mail.acount.email}"/>
 		<beans:property name="password" value="${mail.acount.password}"/>
		<beans:property name="properties" >
		 <beans:props>
			 <beans:prop key="mail.smtp.auth">
				 true
			 </beans:prop>
			 <beans:prop key="mail.smtp.starttls.enable">
				 true
			 </beans:prop>
			 <beans:prop key="mail.smtp.port">
				587
			 </beans:prop>
			 <beans:prop key="mail.smtp.host">
				 smtp.gmail.com
			 </beans:prop>
		 </beans:props>
		</beans:property>
 	</beans:bean>
 	<!-- Dao's Beans -->


	<beans:bean id="userDao" class="com.test.rest.dao.UserDaoIpml">
		<beans:property name="sessionFactory" ref="sessionFactory"></beans:property>
	</beans:bean>
	<beans:bean id="deviceDao" class="com.test.rest.dao.DeviceDaoImpl">
		<beans:property name="sessionFactory" ref="sessionFactory"></beans:property>
	</beans:bean>
	<beans:bean id="getStatusRequestDao" class="com.test.rest.dao.GetStatusRequestDaoImpl">
		<beans:property name="sessionFactory" ref="sessionFactory"></beans:property>
	</beans:bean>

	<context:property-placeholder 
		location="classpath:database.properties, 
				classpath:email.properties"
		ignore-unresolvable="true"/>

	<beans:bean id="sessionFactory"
    class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
      <beans:property name="dataSource" ref="dataSource" />
      <beans:property name="packagesToScan" value="com.test.rest.models" />
      <beans:property name="hibernateProperties">
         <beans:props>
            <beans:prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</beans:prop>
            <beans:prop key="hibernate.dialect">${hibernate.dialect}</beans:prop>

            <beans:prop key="hibernate.show_sql">${hibernate.show_sql}</beans:prop>
            <beans:prop key="hibernate.format_sql">true</beans:prop>
			<beans:prop key="hibernate.use_sql_comments">true</beans:prop>
         </beans:props>
		  
      </beans:property>
   </beans:bean>
   
	<beans:bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="${jdbc.driverClassName}" />
		<beans:property name="url" value="${jdbc.url}" />
		<beans:property name="username" value="${jdbc.user}" />
		<beans:property name="password" value="${jdbc.pass}" />
	</beans:bean>

	 <beans:bean id="transactionManager"
    class="org.springframework.orm.hibernate3.HibernateTransactionManager">
      <beans:property name="sessionFactory" ref="sessionFactory" />
   	</beans:bean>

  	<beans:bean id="simpleMappingExceptionResolver"
          class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <beans:property name="exceptionMappings">
            <beans:map>
                <beans:entry key="TokenException" value="tokenException"/>
            </beans:map>
        </beans:property>
        <!--  See note below on how this interacts with Spring Boot -->
        <beans:property name="defaultErrorView" value="error"/>
        <beans:property name="exceptionAttribute" value="ex"/>
    </beans:bean>

    <beans:bean id="localExceptionHandler" class="com.test.rest.exception.LocalExceptionHandler" scope="prototype">
    	<!-- Choose exception handler -->
    	<beans:constructor-arg name="handler" ref="tokenExceptionHandler"></beans:constructor-arg>
    </beans:bean>

    <!-- Exception Handlers -->
    <beans:bean id="tokenExceptionHandler" class="com.test.rest.exception.handlers.TokenExceptionHandler"></beans:bean>
    <beans:bean id="tokenExceptionHandlerSendNotification" class="com.test.rest.exception.handlers.TokenExceptionHandlerSendNotification"></beans:bean>
    <beans:bean id="tokenExceptionHandlerWriteLog" class="com.test.rest.exception.handlers.TokenExceptionHandlerWriteLog"></beans:bean>

	<beans:import resource="security.xml"/>


</beans:beans>

